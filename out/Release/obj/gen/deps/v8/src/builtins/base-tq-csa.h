#ifndef V8_GEN_TORQUE_GENERATED_______DEPS_V8_SRC_BUILTINS_BASE_TQ_H_
#define V8_GEN_TORQUE_GENERATED_______DEPS_V8_SRC_BUILTINS_BASE_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/codegen/code-stub-assembler.h"
#include "src/utils/utils.h"
#include "torque-generated/field-offsets-tq.h"
#include "torque-generated/csa-types-tq.h"

namespace v8 {
namespace internal {

compiler::TNode<JSObject> NewJSObject_57(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetDerivedMap_58(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSFunction> p_target, compiler::TNode<JSReceiver> p_newTarget);
compiler::TNode<JSObject> AllocateFastOrSlowJSObjectFromMap_59(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map);
compiler::TNode<JSProxyRevocableResult> NewJSProxyRevocableResult_60(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSProxy> p_proxy, compiler::TNode<JSFunction> p_revoke);
compiler::TNode<JSArray> NewJSArray_61(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map, compiler::TNode<FixedArrayBase> p_elements);
compiler::TNode<JSArray> NewJSArray_62(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
  compiler::TNode<UintPtrT> kSmiMax_63(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> TheHole_64(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Null_65(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Undefined_66(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> True_67(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> False_68(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kEmptyString_69(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kLengthString_70(compiler::CodeAssemblerState* state_);
  compiler::TNode<HeapNumber> kNaN_71(compiler::CodeAssemblerState* state_);
int31_t GetStartOfCaptureIndex_72(compiler::CodeAssemblerState* state_, int31_t p_captureIndex);
compiler::TNode<BoolT> ElementsKindNotEqual_73(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_k1, compiler::TNode<Int32T> p_k2);
compiler::TNode<BoolT> IsNumberEqual_74(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> IsNumberNotEqual_75(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<Number> Min_76(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<Number> Max_77(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<String> StringAdd_78(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<String> p_a, compiler::TNode<String> p_b);
compiler::TNode<Smi> Cast5ATSmi_79(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Smi> Cast13ATPositiveSmi_80(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Number> Cast20UT5ATSmi10HeapNumber_81(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast10HeapObject_82(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label__CastError);
compiler::TNode<Oddball> Cast6ATNull_83(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast10FixedArray_84(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedDoubleArray> Cast16FixedDoubleArray_85(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast25ATSloppyArgumentsElements_86(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSDataView> Cast10JSDataView_87(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSProxy> Cast7JSProxy_88(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSStringIterator> Cast16JSStringIterator_89(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_90(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_91(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_92(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast84UT19ATCallableApiObject17ATCallableJSProxy11ATUndefined15JSBoundFunction10JSFunction_93(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast7JSArray_94(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer_95(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Context> Cast7Context_96(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSObject> Cast8JSObject_97(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<NumberDictionary> Cast18ATNumberDictionary_98(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast6String_99(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast7Oddball_100(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast6Symbol_101(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast14ATDirectString_102(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast13ATConstructor_103(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapNumber> Cast10HeapNumber_104(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<BigInt> Cast8ATBigInt_105(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast8JSRegExp_106(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Map> Cast3Map_107(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSPrimitiveWrapper> Cast18JSPrimitiveWrapper_108(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_109(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast14ATFastJSRegExp_110(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast13ATFastJSArray_111(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForRead_112(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy_113(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_114(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_115(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast10JSReceiver_116(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSFunction> Cast10JSFunction_117(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<DebugInfo> Cast9DebugInfo_118(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast14ATCoverageInfo_119(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31_120(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31_121(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32_122(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31_123(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32_124(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr_125(compiler::CodeAssemblerState* state_, intptr_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr_126(compiler::CodeAssemblerState* state_, uintptr_t p_i);
compiler::TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31_127(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31_128(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<String> FromConstexpr6String18ATconstexpr_string_129(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber18ATconstexpr_uint32_130(compiler::CodeAssemblerState* state_, uint32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int32_131(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_132(compiler::CodeAssemblerState* state_, double p_f);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_133(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber15ATconstexpr_Smi_134(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi_135(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31_136(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31_137(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31_138(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64_139(compiler::CodeAssemblerState* state_, double p_i);
compiler::TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool_140(compiler::CodeAssemblerState* state_, bool p_b);
compiler::TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode_141(compiler::CodeAssemblerState* state_, LanguageMode p_m);
compiler::TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_142(compiler::CodeAssemblerState* state_, ElementsKind p_e);
compiler::TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_143(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_144(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<IntPtrT> FromConstexpr13ATContextSlot23ATconstexpr_ContextSlot_145(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<Int32T> Convert7ATint3214ATElementsKind_146(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_elementsKind);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber7ATint32_147(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<IntPtrT> Convert8ATintptr7ATint32_148(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<IntPtrT> Convert8ATintptr8ATuint32_149(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<Smi> Convert5ATSmi7ATint32_150(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber8ATuint32_151(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Smi> Convert5ATSmi8ATuint32_152(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATuint32_153(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Int32T> Convert7ATint327ATuint8_154(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint16_155(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint31_156(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATintptr_157(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert5ATSmi8ATintptr_158(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Uint32T> Convert8ATuint329ATuintptr_159(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<IntPtrT> Convert8ATintptr5ATSmi_160(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi_161(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_ps);
compiler::TNode<IntPtrT> Convert8ATintptr9ATuintptr_162(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_163(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert13ATPositiveSmi9ATuintptr_164(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_165(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Int32T> Convert7ATint325ATSmi_166(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<Float64T> Convert9ATfloat6410HeapNumber_167(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_h);
compiler::TNode<Float64T> Convert9ATfloat6420UT5ATSmi10HeapNumber_168(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<UintPtrT> Convert9ATuintptr20UT5ATSmi10HeapNumber_169(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Float64T> Convert9ATfloat649ATfloat32_170(compiler::CodeAssemblerState* state_, compiler::TNode<Float32T> p_f);
compiler::TNode<Float32T> Convert9ATfloat329ATfloat64_171(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_f);
compiler::TNode<Float32T> Convert9ATfloat3220UT5ATSmi10HeapNumber_172(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATfloat64_173(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<Float64T> Convert9ATfloat649ATuintptr_174(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATuintptr_175(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr9ATfloat64_176(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATintptr_177(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATRawPtr_178(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<IntPtrT> Convert8ATintptr8ATRawPtr_179(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<BInt> Convert6ATbint7ATint32_180(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_v);
compiler::TNode<BInt> Convert6ATbint8ATintptr_181(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_v);
compiler::TNode<BInt> Convert6ATbint5ATSmi_182(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_v);
compiler::TNode<Object> UnsafeCast20UT5ATSmi10HeapObject_183(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o);
  compiler::TNode<Map> kFixedArrayMap_184(compiler::CodeAssemblerState* state_);
  compiler::TNode<Map> kCOWMap_185(compiler::CodeAssemblerState* state_);
  compiler::TNode<ByteArray> kEmptyByteArray_186(compiler::CodeAssemblerState* state_);
  compiler::TNode<FixedArray> kEmptyFixedArray_187(compiler::CodeAssemblerState* state_);
void StoreFastJSArrayLength_188(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array, compiler::TNode<Smi> p_length);
void StoreFixedDoubleArrayDirect_189(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_v);
void StoreFixedArrayDirect_190(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Object> p_v);
compiler::TNode<Int32T> FastHoleyElementsKind_191(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowDoubleElements_192(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowNonNumberElements_193(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<JSFunction> GetObjectFunction_194(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSReceiver> GetArrayBufferFunction_195(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSFunction> GetArrayBufferNoInitFunction_196(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedElementsJSArrayMap_197(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedSmiElementsJSArrayMap_198(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetProxyRevocableResultMap_199(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetIteratorResultMap_200(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetInitialStringIteratorMap_201(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<HeapObject> GetReflectApply_202(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<RegExpMatchInfo> GetRegExpLastMatchInfo_203(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
void TorqueMoveElementsSmi_204(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_205(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_206(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_207(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_208(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedDoubleArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
compiler::TNode<Object> LoadElementNoHole10FixedArray_209(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
compiler::TNode<Object> LoadElementNoHole16FixedDoubleArray_210(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
TorqueStructFastJSArrayWitness NewFastJSArrayWitness_211(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array);
TorqueStructFastJSArrayForReadWitness NewFastJSArrayForReadWitness_212(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array);
compiler::TNode<BoolT> NumberIsNaN_213(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_number);
compiler::TNode<BoolT> ToBoolean_214(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_obj);
compiler::TNode<Object> RequireObjectCoercible_215(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_value, const char* p_name);
compiler::TNode<Number> ToIndex_216(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_input, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError);
compiler::TNode<Number> GetLengthProperty_217(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<HeapObject> GetMethod_218(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, const char* p_name, compiler::CodeAssemblerLabel* label_IfNullOrUndefined);
compiler::TNode<BoolT> IsFastJSArray_219(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context);
void BranchIfFastJSArray_220(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfFastJSArrayForRead_221(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<BoolT> IsFastJSArrayWithNoCustomIteration_222(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration_223(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<String> ToStringImpl_224(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
void VerifiedUnreachable_225(compiler::CodeAssemblerState* state_);
compiler::TNode<BoolT> Float64IsSomeInfinity_226(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_value);
compiler::TNode<BoolT> IsIntegerOrSomeInfinity_227(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o);
compiler::TNode<Map> LoadHeapObjectMap_451(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o);
void StoreHeapObjectMap_452(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::TNode<Map> p_v);
compiler::TNode<Smi> LoadContextLength_453(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextLength_454(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ScopeInfo> LoadContextScopeInfo_455(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextScopeInfo_456(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<ScopeInfo> p_v);
compiler::TNode<Object> LoadContextPrevious_457(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextPrevious_458(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextExtension_459(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextExtension_460(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextNativeContext_461(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextNativeContext_462(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSReceiverPropertiesOrHash_463(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o);
void StoreJSReceiverPropertiesOrHash_464(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Float64T> LoadHeapNumberValue_465(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o);
void StoreHeapNumberValue_466(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<Smi> LoadFixedArrayBaseLength_467(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o);
void StoreFixedArrayBaseLength_468(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Uint32T> LoadNameHashField_469(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o);
void StoreNameHashField_470(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Int32T> LoadStringLength_471(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o);
void StoreStringLength_472(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<FixedArrayBase> LoadJSObjectElements_473(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o);
void StoreJSObjectElements_474(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Number> LoadJSArrayLength_475(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o);
void StoreJSArrayLength_476(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o, compiler::TNode<Number> p_v);
compiler::TNode<BoolT> _method_JSArray_IsEmpty(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_this);
compiler::TNode<Float64T> LoadOddballToNumberRaw_477(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumberRaw_478(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<String> LoadOddballToString_479(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToString_480(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Number> LoadOddballToNumber_481(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumber_482(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Number> p_v);
compiler::TNode<String> LoadOddballTypeOf_483(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballTypeOf_484(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadOddballKind_485(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballKind_486(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadSymbolFlags_487(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolFlags_488(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Object> LoadSymbolName_489(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolName_490(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadConsStringFirst_491(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringFirst_492(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<String> LoadConsStringSecond_493(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringSecond_494(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResource_495(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResource_496(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResourceData_497(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResourceData_498(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<String> LoadSlicedStringParent_499(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringParent_500(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadSlicedStringOffset_501(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringOffset_502(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadThinStringActual_503(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o);
void StoreThinStringActual_504(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Object> LoadTuple2Value1_505(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value1_506(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple2Value2_507(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value2_508(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple3Value3_509(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o);
void StoreTuple3Value3_510(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadWeakFixedArrayLength_511(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o);
void StoreWeakFixedArrayLength_512(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Uint8T> LoadMapInstanceSizeInWords_513(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceSizeInWords_514(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex_515(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex_516(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords_517(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapUsedOrUnusedInstanceSizeInWords_518(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapVisitorId_519(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapVisitorId_520(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint16T> LoadMapInstanceType_521(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceType_522(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint8T> LoadMapBitField_523(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField_524(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapBitField2_525(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField2_526(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint32T> LoadMapBitField3_527(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField3_528(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Uint32T> LoadMapOptionalPadding_529(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapOptionalPadding_530(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadMapPrototype_531(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototype_532(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadMapConstructorOrBackPointer_533(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapConstructorOrBackPointer_534(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<DescriptorArray> LoadMapInstanceDescriptors_535(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceDescriptors_536(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<DescriptorArray> p_v);
compiler::TNode<LayoutDescriptor> LoadMapLayoutDescriptor_537(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapLayoutDescriptor_538(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<LayoutDescriptor> p_v);
compiler::TNode<WeakFixedArray> LoadMapDependentCode_539(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapDependentCode_540(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<Object> LoadMapPrototypeValidityCell_541(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototypeValidityCell_542(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadMapTransitionsOrPrototypeInfo_543(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapTransitionsOrPrototypeInfo_544(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadEnumCacheKeys_545(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheKeys_546(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadEnumCacheIndices_547(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheIndices_548(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable_549(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheSourcePositionTable_550(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache_551(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheStackFrameCache_552(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors_553(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfAllDescriptors_554(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors_555(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfDescriptors_556(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors_557(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayRawNumberOfMarkedDescriptors_558(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayFiller16Bits_559(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayFiller16Bits_560(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<EnumCache> LoadDescriptorArrayEnumCache_561(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayEnumCache_562(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<EnumCache> p_v);
compiler::TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo_563(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionSharedFunctionInfo_564(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Context> LoadJSFunctionContext_565(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionContext_566(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Context> p_v);
compiler::TNode<FeedbackCell> LoadJSFunctionFeedbackCell_567(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionFeedbackCell_568(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<FeedbackCell> p_v);
compiler::TNode<Code> LoadJSFunctionCode_569(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionCode_570(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Code> p_v);
compiler::TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap_571(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionPrototypeOrInitialMap_572(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSProxyTarget_573(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyTarget_574(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSProxyHandler_575(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyHandler_576(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultProxy_577(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultProxy_578(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultRevoke_579(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultRevoke_580(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGlobalProxyNativeContext_581(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o);
void StoreJSGlobalProxyNativeContext_582(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSPrimitiveWrapperValue_583(compiler::CodeAssemblerState* state_, compiler::TNode<JSPrimitiveWrapper> p_o);
void StoreJSPrimitiveWrapperValue_584(compiler::CodeAssemblerState* state_, compiler::TNode<JSPrimitiveWrapper> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSArgumentsObjectWithLengthLength_585(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o);
void StoreJSArgumentsObjectWithLengthLength_586(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSSloppyArgumentsObjectCallee_587(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o);
void StoreJSSloppyArgumentsObjectCallee_588(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSReceiver> LoadJSArrayIteratorIteratedObject_589(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorIteratedObject_590(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Number> LoadJSArrayIteratorNextIndex_591(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorNextIndex_592(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Number> p_v);
compiler::TNode<Smi> LoadJSArrayIteratorKind_593(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorKind_594(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadCallHandlerInfoCallback_595(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoCallback_596(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadCallHandlerInfoJsCallback_597(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoJsCallback_598(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadCallHandlerInfoData_599(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoData_600(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadModuleExports_601(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleExports_602(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadModuleHash_603(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleHash_604(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadModuleStatus_605(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleStatus_606(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadModuleModuleNamespace_607(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleModuleNamespace_608(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadModuleException_609(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleException_610(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleCode_611(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleCode_612(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRegularExports_613(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularExports_614(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRegularImports_615(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularImports_616(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRequestedModules_617(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRequestedModules_618(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Script> LoadSourceTextModuleScript_619(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleScript_620(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Script> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleImportMeta_621(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleImportMeta_622(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadSourceTextModuleDfsIndex_623(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsIndex_624(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleDfsAncestorIndex_625(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsAncestorIndex_626(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadSyntheticModuleName_627(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleName_628(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<String> p_v);
compiler::TNode<FixedArray> LoadSyntheticModuleExportNames_629(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleExportNames_630(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Foreign> LoadSyntheticModuleEvaluationSteps_631(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleEvaluationSteps_632(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Module> LoadJSModuleNamespaceModule_633(compiler::CodeAssemblerState* state_, compiler::TNode<JSModuleNamespace> p_o);
void StoreJSModuleNamespaceModule_634(compiler::CodeAssemblerState* state_, compiler::TNode<JSModuleNamespace> p_o, compiler::TNode<Module> p_v);
compiler::TNode<Object> LoadJSWeakCollectionTable_635(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o);
void StoreJSWeakCollectionTable_636(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorTable_637(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorTable_638(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorIndex_639(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorIndex_640(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSMessageObjectMessageType_641(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectMessageType_642(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSMessageObjectArguments_643(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectArguments_644(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Script> LoadJSMessageObjectScript_645(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectScript_646(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<Object> LoadJSMessageObjectStackFrames_647(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStackFrames_648(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSMessageObjectSharedInfo_649(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectSharedInfo_650(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSMessageObjectBytecodeOffset_651(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectBytecodeOffset_652(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectStartPosition_653(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStartPosition_654(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectEndPosition_655(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectEndPosition_656(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectErrorLevel_657(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectErrorLevel_658(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWeakArrayListCapacity_659(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o);
void StoreWeakArrayListCapacity_660(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWeakArrayListLength_661(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o);
void StoreWeakArrayListLength_662(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace_663(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoJsModuleNamespace_664(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPrototypeInfoPrototypeUsers_665(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoPrototypeUsers_666(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPrototypeInfoRegistrySlot_667(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoRegistrySlot_668(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPrototypeInfoValidityCell_669(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoValidityCell_670(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadPrototypeInfoObjectCreateMap_671(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoObjectCreateMap_672(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadPrototypeInfoBitField_673(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoBitField_674(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSource_675(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSource_676(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptName_677(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptName_678(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptLineOffset_679(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineOffset_680(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadScriptColumnOffset_681(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptColumnOffset_682(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptContext_683(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptContext_684(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptScriptType_685(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptScriptType_686(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptLineEnds_687(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineEnds_688(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptId_689(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptId_690(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments_691(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromSharedOrWrappedArguments_692(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptEvalFromPosition_693(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromPosition_694(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSharedFunctionInfos_695(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSharedFunctionInfos_696(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptFlags_697(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptFlags_698(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSourceUrl_699(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceUrl_700(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptSourceMappingUrl_701(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceMappingUrl_702(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptHostDefinedOptions_703(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptHostDefinedOptions_704(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadEmbedderDataArrayLength_705(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o);
void StoreEmbedderDataArrayLength_706(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadPreparseDataDataLength_707(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataDataLength_708(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadPreparseDataInnerLength_709(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataInnerLength_710(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<BytecodeArray> LoadInterpreterDataBytecodeArray_711(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataBytecodeArray_712(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<BytecodeArray> p_v);
compiler::TNode<Code> LoadInterpreterDataInterpreterTrampoline_713(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataInterpreterTrampoline_714(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoFunctionData_715(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionData_716(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo_717(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoNameOrScopeInfo_718(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_719(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_720(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo_721(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoScriptOrDebugInfo_722(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoLength_723(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoLength_724(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount_725(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFormalParameterCount_726(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties_727(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoExpectedNofProperties_728(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset_729(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionTokenOffset_730(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Int32T> LoadSharedFunctionInfoFlags_731(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFlags_732(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId_733(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionLiteralId_734(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<HeapObject> LoadJSBoundFunctionBoundTargetFunction_735(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundTargetFunction_736(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSBoundFunctionBoundThis_737(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundThis_738(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadJSBoundFunctionBoundArguments_739(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundArguments_740(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<RawPtrT> LoadForeignForeignAddress_741(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o);
void StoreForeignForeignAddress_742(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Smi> LoadFreeSpaceSize_743(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceSize_744(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadFreeSpaceNext_745(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceNext_746(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<Object> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferByteLength_747(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferByteLength_748(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSArrayBufferBackingStore_749(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferBackingStore_750(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer_751(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewBuffer_752(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteOffset_753(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteOffset_754(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteLength_755(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteLength_756(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSTypedArrayLength_757(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayLength_758(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSTypedArrayExternalPointer_759(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayExternalPointer_760(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadJSTypedArrayBasePointer_761(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayBasePointer_762(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionTable_763(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o);
void StoreJSCollectionTable_764(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateValue_765(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateValue_766(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateYear_767(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateYear_768(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMonth_769(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMonth_770(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateDay_771(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateDay_772(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateWeekday_773(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateWeekday_774(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateHour_775(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateHour_776(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMin_777(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMin_778(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateSec_779(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateSec_780(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateCacheStamp_781(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateCacheStamp_782(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Context> LoadJSGlobalObjectNativeContext_783(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectNativeContext_784(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<Context> p_v);
compiler::TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy_785(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectGlobalProxy_786(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<JSGlobalProxy> p_v);
compiler::TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator_787(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorSyncIterator_788(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Object> LoadJSAsyncFromSyncIteratorNext_789(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorNext_790(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSStringIteratorString_791(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorString_792(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSStringIteratorNextIndex_793(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorNextIndex_794(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadTemplateInfoTag_795(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoTag_796(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoSerialNumber_797(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoSerialNumber_798(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadTemplateInfoNumberOfProperties_799(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoNumberOfProperties_800(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyList_801(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyList_802(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyAccessors_803(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyAccessors_804(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings_805(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionRawStrings_806(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings_807(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionCookedStrings_808(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate_809(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeTemplate_810(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate_811(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeProviderTemplate_812(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataParentTemplate_813(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataParentTemplate_814(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler_815(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataNamedPropertyHandler_816(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler_817(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataIndexedPropertyHandler_818(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate_819(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceTemplate_820(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler_821(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceCallHandler_822(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo_823(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataAccessCheckInfo_824(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCallCode_825(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCallCode_826(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoClassName_827(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoClassName_828(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSignature_829(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSignature_830(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoFunctionTemplateRareData_831(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFunctionTemplateRareData_832(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo_833(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSharedFunctionInfo_834(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoFlag_835(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFlag_836(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoLength_837(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoLength_838(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCachedPropertyName_839(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCachedPropertyName_840(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoConstructor_841(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoConstructor_842(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoData_843(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoData_844(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPropertyArrayLengthAndHash_845(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o);
void StorePropertyArrayLengthAndHash_846(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Name> LoadPropertyCellName_847(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellName_848(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Name> p_v);
compiler::TNode<Smi> LoadPropertyCellPropertyDetailsRaw_849(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellPropertyDetailsRaw_850(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPropertyCellValue_851(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellValue_852(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<WeakFixedArray> LoadPropertyCellDependentCode_853(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellDependentCode_854(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<RawPtrT> LoadJSDataViewDataPointer_855(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o);
void StoreJSDataViewDataPointer_856(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadInterceptorInfoGetter_857(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoGetter_858(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoSetter_859(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoSetter_860(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoQuery_861(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoQuery_862(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDescriptor_863(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDescriptor_864(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDeleter_865(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDeleter_866(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoEnumerator_867(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoEnumerator_868(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDefiner_869(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDefiner_870(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoData_871(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoData_872(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadInterceptorInfoFlags_873(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoFlags_874(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessCheckInfoCallback_875(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoCallback_876(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoNamedInterceptor_877(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoNamedInterceptor_878(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoIndexedInterceptor_879(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoIndexedInterceptor_880(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoData_881(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoData_882(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadArrayBoilerplateDescriptionFlags_883(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionFlags_884(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements_885(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionConstantElements_886(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot_887(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o);
void StoreAliasedArgumentsEntryAliasedContextSlot_888(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadCellValue_889(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o);
void StoreCellValue_890(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerSmiHandler_891(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerSmiHandler_892(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerValidityCell_893(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerValidityCell_894(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData1_895(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData1_896(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData2_897(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData2_898(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData3_899(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData3_900(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSFunction> LoadJSGeneratorObjectFunction_901(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectFunction_902(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<JSFunction> p_v);
compiler::TNode<Context> LoadJSGeneratorObjectContext_903(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContext_904(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectReceiver_905(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectReceiver_906(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectInputOrDebugPos_907(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectInputOrDebugPos_908(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectResumeMode_909(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectResumeMode_910(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectContinuation_911(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContinuation_912(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters_913(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectParametersAndRegisters_914(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<JSPromise> LoadJSAsyncFunctionObjectPromise_915(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o);
void StoreJSAsyncFunctionObjectPromise_916(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue_917(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectQueue_918(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting_919(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectIsAwaiting_920(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSPromiseReactionsOrResult_921(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseReactionsOrResult_922(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSPromiseFlags_923(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseFlags_924(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Foreign> LoadCallbackTaskCallback_925(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskCallback_926(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Foreign> LoadCallbackTaskData_927(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskData_928(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<JSReceiver> LoadCallableTaskCallable_929(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskCallable_930(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Context> LoadCallableTaskContext_931(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskContext_932(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Smi> LoadStackFrameInfoLineNumber_933(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoLineNumber_934(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoColumnNumber_935(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoColumnNumber_936(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoPromiseAllIndex_937(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoPromiseAllIndex_938(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoScriptId_939(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptId_940(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoScriptName_941(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptName_942(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoScriptNameOrSourceUrl_943(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptNameOrSourceUrl_944(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoFunctionName_945(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFunctionName_946(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoMethodName_947(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoMethodName_948(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoTypeName_949(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoTypeName_950(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoEvalOrigin_951(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoEvalOrigin_952(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoWasmModuleName_953(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmModuleName_954(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackFrameInfoFlag_955(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFlag_956(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackTraceFrameFrameArray_957(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameArray_958(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackTraceFrameFrameIndex_959(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameIndex_960(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackTraceFrameFrameInfo_961(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameInfo_962(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackTraceFrameId_963(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameId_964(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsStart_965(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsStart_966(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsEnd_967(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsEnd_968(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Code> LoadWasmExportedFunctionDataWrapperCode_969(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWrapperCode_970(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<JSObject> LoadWasmExportedFunctionDataInstance_971(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataInstance_972(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset_973(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataJumpTableOffset_974(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex_975(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataFunctionIndex_976(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadWasmExportedFunctionDataCWrapperCode_977(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataCWrapperCode_978(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataWasmCallTarget_979(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWasmCallTarget_980(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize_981(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataPackedArgsSize_982(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSReceiver> LoadWasmJSFunctionDataCallable_983(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataCallable_984(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Code> LoadWasmJSFunctionDataWrapperCode_985(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataWrapperCode_986(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount_987(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedReturnCount_988(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount_989(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedParameterCount_990(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature_991(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedSignature_992(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget_993(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataCallTarget_994(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataEmbedderData_995(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataEmbedderData_996(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Code> LoadWasmCapiFunctionDataWrapperCode_997(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataWrapperCode_998(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature_999(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataSerializedSignature_1000(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<Uint32T> LoadWasmIndirectFunctionTableSize_1001(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSize_1002(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Uint32T> LoadWasmIndirectFunctionTableOptionalPadding_1003(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableOptionalPadding_1004(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds_1005(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSigIds_1006(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets_1007(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableTargets_1008(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations_1009(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableManagedNativeAllocations_1010(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadWasmIndirectFunctionTableRefs_1011(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableRefs_1012(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<JSObject> LoadWasmDebugInfoInstance_1013(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInstance_1014(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle_1015(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInterpreterHandle_1016(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoLocalsNames_1017(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoLocalsNames_1018(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntries_1019(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntries_1020(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap_1021(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntryMap_1022(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadWasmExceptionTagIndex_1023(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o);
void StoreWasmExceptionTagIndex_1024(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadAsyncGeneratorRequestNext_1025(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestNext_1026(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadAsyncGeneratorRequestResumeMode_1027(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestResumeMode_1028(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAsyncGeneratorRequestValue_1029(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestValue_1030(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSPromise> LoadAsyncGeneratorRequestPromise_1031(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestPromise_1032(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryExportName_1033(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryExportName_1034(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryLocalName_1035(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryLocalName_1036(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryImportName_1037(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryImportName_1038(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest_1039(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryModuleRequest_1040(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex_1041(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryCellIndex_1042(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryBegPos_1043(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryBegPos_1044(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryEndPos_1045(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryEndPos_1046(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPromiseCapabilityPromise_1047(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityPromise_1048(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseCapabilityResolve_1049(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityResolve_1050(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseCapabilityReject_1051(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityReject_1052(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseReactionNext_1053(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionNext_1054(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionRejectHandler_1055(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionRejectHandler_1056(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionFulfillHandler_1057(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionFulfillHandler_1058(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionPromiseOrCapability_1059(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionPromiseOrCapability_1060(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseReactionJobTaskArgument_1061(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskArgument_1062(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Context> LoadPromiseReactionJobTaskContext_1063(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskContext_1064(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskHandler_1065(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskHandler_1066(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability_1067(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskPromiseOrCapability_1068(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Context> LoadPromiseResolveThenableJobTaskContext_1069(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskContext_1070(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve_1071(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskPromiseToResolve_1072(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen_1073(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThen_1074(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable_1075(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThenable_1076(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<HeapObject> LoadJSRegExpData_1077(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpData_1078(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSRegExpSource_1079(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpSource_1080(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSRegExpFlags_1081(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpFlags_1082(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultIndex_1083(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultIndex_1084(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultInput_1085(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultInput_1086(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultGroups_1087(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultGroups_1088(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp_1089(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratingRegExp_1090(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSRegExpStringIteratorIteratedString_1091(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratedString_1092(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSRegExpStringIteratorFlags_1093(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorFlags_1094(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetStartOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetEndOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_NumberOfCaptures(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this);
compiler::TNode<Object> LoadAccessorInfoName_1095(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoName_1096(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadAccessorInfoFlags_1097(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoFlags_1098(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessorInfoExpectedReceiverType_1099(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoExpectedReceiverType_1100(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoSetter_1101(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoSetter_1102(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoGetter_1103(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoGetter_1104(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoJsGetter_1105(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoJsGetter_1106(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoData_1107(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoData_1108(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairGetter_1109(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairGetter_1110(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairSetter_1111(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairSetter_1112(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo_1113(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoSharedFunctionInfo_1114(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Smi> LoadDebugInfoDebuggerHints_1115(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebuggerHints_1116(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoScript_1117(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoScript_1118(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray_1119(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoOriginalBytecodeArray_1120(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoDebugBytecodeArray_1121(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebugBytecodeArray_1122(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadDebugInfoBreakPoints_1123(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoBreakPoints_1124(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadDebugInfoFlags_1125(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoFlags_1126(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoCoverageInfo_1127(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoCoverageInfo_1128(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo_1129(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorSharedFunctionInfo_1130(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi_1131(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorOptimizedCodeWeakOrSmi_1132(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray_1133(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorClosureFeedbackCellArray_1134(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorLength_1135(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorLength_1136(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorInvocationCount_1137(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorInvocationCount_1138(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorProfilerTicks_1139(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorProfilerTicks_1140(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Uint32T> LoadFeedbackVectorPadding_1141(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorPadding_1142(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadFeedbackCellValue_1143(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellValue_1144(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int32T> LoadFeedbackCellInterruptBudget_1145(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellInterruptBudget_1146(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Struct> LoadAllocationMementoAllocationSite_1147(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o);
void StoreAllocationMementoAllocationSite_1148(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o, compiler::TNode<Struct> p_v);
compiler::TNode<Foreign> LoadWasmModuleObjectNativeModule_1149(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectNativeModule_1150(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadWasmModuleObjectExportWrappers_1151(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectExportWrappers_1152(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Script> LoadWasmModuleObjectScript_1153(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectScript_1154(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<WeakArrayList> LoadWasmModuleObjectWeakInstanceList_1155(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectWeakInstanceList_1156(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<WeakArrayList> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable_1157(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectAsmJsOffsetTable_1158(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos_1159(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectBreakPointInfos_1160(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectEntries_1161(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectEntries_1162(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadWasmTableObjectMaximumLength_1163(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectMaximumLength_1164(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectDispatchTables_1165(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectDispatchTables_1166(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadWasmTableObjectRawType_1167(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectRawType_1168(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer_1169(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectArrayBuffer_1170(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<Smi> LoadWasmMemoryObjectMaximumPages_1171(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectMaximumPages_1172(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadWasmMemoryObjectInstances_1173(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectInstances_1174(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer_1175(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectUntaggedBuffer_1176(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer_1177(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectTaggedBuffer_1178(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectOffset_1179(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectOffset_1180(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectFlags_1181(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectFlags_1182(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature_1183(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectSerializedSignature_1184(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapObject> LoadWasmExceptionObjectExceptionTag_1185(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectExceptionTag_1186(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Foreign> LoadAsmWasmDataManagedNativeModule_1187(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataManagedNativeModule_1188(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadAsmWasmDataExportWrappers_1189(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataExportWrappers_1190(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable_1191(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataAsmJsOffsetTable_1192(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapNumber> LoadAsmWasmDataUsesBitset_1193(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataUsesBitset_1194(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<HeapNumber> p_v);
compiler::TNode<Context> LoadJSFinalizationGroupNativeContext_1195(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNativeContext_1196(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Object> LoadJSFinalizationGroupCleanup_1197(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupCleanup_1198(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupActiveCells_1199(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupActiveCells_1200(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupClearedCells_1201(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupClearedCells_1202(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSFinalizationGroupKeyMap_1203(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupKeyMap_1204(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupNext_1205(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNext_1206(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSFinalizationGroupFlags_1207(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupFlags_1208(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup_1209(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroupCleanupIterator> p_o);
void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup_1210(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroupCleanupIterator> p_o, compiler::TNode<JSFinalizationGroup> p_v);
compiler::TNode<HeapObject> LoadWeakCellFinalizationGroup_1211(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellFinalizationGroup_1212(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellTarget_1213(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellTarget_1214(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadWeakCellHoldings_1215(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellHoldings_1216(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadWeakCellPrev_1217(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellPrev_1218(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellNext_1219(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellNext_1220(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadWeakCellKey_1221(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKey_1222(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadWeakCellKeyListPrev_1223(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKeyListPrev_1224(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellKeyListNext_1225(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKeyListNext_1226(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSWeakRefTarget_1227(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakRef> p_o);
void StoreJSWeakRefTarget_1228(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakRef> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadBytecodeArrayConstantPool_1229(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayConstantPool_1230(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadBytecodeArrayHandlerTable_1231(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayHandlerTable_1232(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapObject> LoadBytecodeArraySourcePositionTable_1233(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArraySourcePositionTable_1234(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayFrameSize_1235(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayFrameSize_1236(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayParameterSize_1237(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayParameterSize_1238(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister_1239(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister_1240(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int8T> LoadBytecodeArrayOsrNestingLevel_1241(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayOsrNestingLevel_1242(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
compiler::TNode<Int8T> LoadBytecodeArrayBytecodeAge_1243(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayBytecodeAge_1244(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
compiler::TNode<HeapObject> Cast10HeapObject_1396(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Uint32T> Convert8ATuint327ATuint8_1397(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint16_1398(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint31_1399(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<JSFunction> UnsafeCast10JSFunction_1400(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast13ATConstructor_1401(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Map> UnsafeCast3Map_1402(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<HeapObject> UnsafeCast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1403(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject_1404(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
void BranchIf13ATFastJSArray20UT5ATSmi10HeapObject_1405(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1406(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1407(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1408(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Float64T> Convert9ATfloat6417ATconstexpr_int31_1409(compiler::CodeAssemblerState* state_, int31_t p_i);
void BranchIf34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1444(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1445(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf10JSReceiver20UT5ATSmi10HeapObject_1446(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_1447(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
}  // namespace internal
}  // namespace v8

#endif  // V8_GEN_TORQUE_GENERATED_______DEPS_V8_SRC_BUILTINS_BASE_TQ_H_
